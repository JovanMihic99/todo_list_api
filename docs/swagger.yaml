openapi: 3.0.0
info:
  title: ToDo List API
  version: 1.0.0
  description: API Documentation for the ToDo List application

servers:
  - url: http://localhost:3000/api/v1/

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users/register:
    post:
      summary: Register a new user
      description: Creates a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "strongpassword"
                name:
                  type: string
                  example: "John Doe"
      responses:
        "200":
          description: User successfully registered
        "409":
          description: Email already taken
        "400":
          description: Bad request

  /users/login:
    post:
      summary: Login an existing user
      description: Authenticates a user and returns a token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "strongpassword"
      responses:
        "200":
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: Invalid credentials
        "400":
          description: Bad request
  /tasks:
    post:
      summary: Create a new task (Protected Route)
      operationId: addTask
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - userId
              properties:
                title:
                  type: string
                  description: Title of the task
                  example: "Buy groceries"
                description:
                  type: string
                  description: Description of the task
                  example: "Milk, Bread, Eggs"
                finishBy:
                  type: string
                  format: date
                  description: Due date for the task
                  example: "2024-11-05"
                userId:
                  type: integer
                  description: ID of the user creating the task
                  example: 1
      responses:
        200:
          description: Task successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  task:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      description:
                        type: string
                      userId:
                        type: integer
                      finishBy:
                        type: string
                        format: date
                      done:
                        type: boolean
        400:
          description: Invalid input

    get:
      summary: Get all tasks for the logged-in user (Protected Route)
      operationId: getTasks
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          description: The page number to retrieve for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: false
          description: The number of tasks to return per page
          schema:
            type: integer
            example: 10
      responses:
        200:
          description: Successfully fetched tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  page:
                    type: integer
                  totalPages:
                    type: integer
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        description:
                          type: string
                        userId:
                          type: integer
                        finishBy:
                          type: string
                          format: date
                        done:
                          type: boolean
        404:
          description: No tasks found

  /tasks/{id}:
    get:
      summary: Get a task by its ID (Protected Route)
      operationId: getTaskById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the task to retrieve
          schema:
            type: integer
      responses:
        200:
          description: Successfully fetched task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      description:
                        type: string
                      userId:
                        type: integer
                      finishBy:
                        type: string
                        format: date
                      done:
                        type: boolean
        404:
          description: Task not found

    put:
      summary: Update a task by its ID (Protected Route)
      operationId: updateTaskById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the task to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the task
                  example: "Buy groceries"
                description:
                  type: string
                  description: Description of the task
                  example: "Milk, Bread, Eggs"
                finishBy:
                  type: string
                  format: date
                  description: Due date for the task
                  example: "2024-11-05"
                done:
                  type: boolean
                  description: Task completion status
                  example: false
      responses:
        200:
          description: Successfully updated task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      description:
                        type: string
                      userId:
                        type: integer
                      finishBy:
                        type: string
                        format: date
                      done:
                        type: boolean
        400:
          description: Task not found or user not authorized

    delete:
      summary: Delete a task by its ID (Protected Route)
      operationId: deleteTask
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the task to delete
          schema:
            type: integer
      responses:
        200:
          description: Successfully deleted task
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  deleted_task:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                      description:
                        type: string
                      userId:
                        type: integer
                      finishBy:
                        type: string
                        format: date
                      done:
                        type: boolean
